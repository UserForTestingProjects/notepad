{"version":3,"sources":["components/note.js","App.js","serviceWorker.js","index.js"],"names":["Note","react_default","a","createElement","className","onClick","this","props","deleteMethod","text","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","event","key","state","noteText","notes","setState","target","value","push","textInput","focus","index","notesArr","splice","_this2","map","val","note","addNote","bind","type","ref","input","onChange","updateNoteText","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAaeA,mLARb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASC,KAAKC,MAAMC,cACvCF,KAAKC,MAAME,aALDC,aC0EJC,qBAtEb,SAAAA,EAAYJ,GAAM,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAP,KAAAK,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAX,KAAMC,KAsBVW,eAAiB,SAACC,GACZA,EAAMC,KAtBRR,EAAKS,MAAQ,CACXC,SAAS,GACTC,MAAO,IAJOX,8EAQHU,GACbhB,KAAKkB,SAAS,CAACF,SAAUA,EAASG,OAAOC,0CAKf,KAAxBpB,KAAKe,MAAMC,WAEIhB,KAAKe,MAAME,MACjBI,KAAKrB,KAAKe,MAAMC,UACzBhB,KAAKkB,SAAS,CAAIF,SAAS,KAC3BhB,KAAKsB,UAAUC,4CAUVC,GACT,IAAIC,EAAWzB,KAAKe,MAAME,MAC1BQ,EAASC,OAAOF,EAAM,GACtBxB,KAAKkB,SAAS,CACZD,MAAOQ,qCAKA,IAAAE,EAAA3B,KAEHiB,EAAQjB,KAAKe,MAAME,MAAMW,IAAI,SAACC,EAAIf,GAClC,OAAOnB,EAAAC,EAAAC,cAACiC,EAAD,CAAMhB,IAAKA,EAAKX,KAAM0B,MAUjC,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,uBACCmB,EAEDtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,QAASC,KAAK+B,QAAQC,KAAKhC,OAAhD,KACAL,EAAAC,EAAAC,cAAA,SAAOoC,KAAK,OACRC,IAAM,SAACC,GAASR,EAAKL,UAAYa,GACjCrC,UAAU,YACVsB,MAAOpB,KAAKe,MAAMC,SAClBoB,SAAU,SAAApB,GAAQ,OAAIW,EAAKU,eAAerB,IAC1CsB,WAAYtC,KAAKY,eAAeoB,KAAKhC,gBAjE7BI,cCQEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b779a0dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Note extends Component {\n\nrender() {\n  return(\n      <div className=\"note\" onClick={this.props.deleteMethod}>\n        {this.props.text}\n      </div>\n  );\n}\n\n}\nexport default Note;\n","import React, { Component } from 'react';\nimport Note from './components/note';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      noteText:'',\n      notes: [],\n    }\n  }\n\n  updateNoteText(noteText){\n    this.setState({noteText: noteText.target.value})\n  }\n  \n\naddNote(){\n  if (this.state.noteText === '') {return}\n\n      let notesArr = this.state.notes;\n      notesArr.push(this.state.noteText);\n      this.setState({   noteText:''   });\n      this.textInput.focus();\n}\n\n\nhandleKeyPress = (event) => {\n  if (event.key === 'Enter'){\n\n  }\n}\n\ndeleteNote(index){\n  let notesArr = this.state.notes;\n  notesArr.splice(index,1);\n  this.setState({\n    notes: notesArr\n  })\n}\n\n\n  render() {\n\n    let notes = this.state.notes.map((val,key) => {\n        return <Note key={key} text={val}\n\n\n       // deleteMethod={ ()=>this.deleteNote(key) }  для расомента позволяет \n        \n        \n         />\n    })\n\n\n    return (\n      <div className=\"container\">\n\n      <div className=\"header\">Local memes arrived</div>\n      {notes}\n\n      <div className=\"btn\" onClick={this.addNote.bind(this)}>+</div>\n      <input type=\"text\"\n          ref={((input)=>{this.textInput = input})}\n          className=\"textInput\"\n          value={this.state.noteText}\n          onChange={noteText => this.updateNoteText(noteText)}\n          onKeyPress={this.handleKeyPress.bind(this)}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}